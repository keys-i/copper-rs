name: "CI/CD"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]  # macos tends to break more often.
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust Registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            C:\Users\runneradmin\.cargo\registry  # Windows path
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            C:\Users\runneradmin\.cargo\git  # Windows path
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      # Fail cheaply and early if the code is not even formatted correctly.
      - name: Cargo fmt check
        run: cargo fmt --all -- --check

      ## System dependencies
      # Caching apt dependencies (Linux)
      - name: Cache apt dependencies (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      # Install dependencies only on Linux
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libpcap-dev

      # Cache system dependencies (Windows)
      - name: Cache Npcap SDK (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.USERPROFILE }}\npcap-sdk
          key: ${{ runner.os }}-npcap-sdk-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-npcap-sdk-

      # Download Npcap SDK and install dependencies (Windows)
      - name: Install winget
        if: runner.os == 'Windows'
        uses: Cyberboss/install-winget@v1

      - name: Download and install Npcap SDK (Windows)
        if: runner.os == 'Windows' && !contains(env.LIB, 'npcap-sdk')
        run: |
          Invoke-WebRequest -Uri https://npcap.com/dist/npcap-sdk-1.13.zip -OutFile npcap-sdk.zip
          Expand-Archive -Path npcap-sdk.zip -DestinationPath $env:USERPROFILE\npcap-sdk
          Remove-Item npcap-sdk.zip
          winget install --id DaiyuuNobori.Win10Pcap --disable-interactivity --accept-source-agreements --accept-package-agreements

      - name: Set Library and Include Paths (Windows)
        if: runner.os == 'Windows'
        run: |
          $npcapLibDir = "$env:USERPROFILE\npcap-sdk\Lib\x64"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$npcapLibDir"

      ## End of system dependencies
      
      # This is also relatively quick to do, so let's fail early. 
      - name: Run clippy (parallel)
        if: runner.os == 'Linux'
        run: |
          cargo clippy --workspace --all-targets -- --deny warnings &
          cargo clippy --release --workspace --all-targets -- --deny warnings &
          wait

      - name: Install cargo-generate
        run: cargo install cargo-generate

      - name: Build vanilla and with mocks (parallel)
        run: |
          cargo build --workspace --features macro_debug &
          cargo build --workspace --features mock &
          wait

      - name: Run tests
        env:
          LIB: ${{env.LIB}}
        run: cargo test --workspace
        
      # Integration Test for the 1 liner generation of a project.
      - name: Generate a test project from the repo template
        run: |
          cd templates
          cargo generate -p cu_full --name test_project --destination . -d copper_source=local --silent

      - name: Compile generated project
        run: |
          cd templates/test_project
          cargo build --release
